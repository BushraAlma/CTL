	* Bug fix: multi-threaded execution of CTL programs caused
	  segmentation faults and bad_alloc exceptions
	  (Florian Kainz)
	* Added new functions to the standard library:
	    3x3 matrix multiplication, addition and inversion
	    3x3 and 4x4 matrix transposition
	    1D lookup table with explicit x,y pairs and linear interpolation
	    1D lookup table with explicit x,y pairs and cubic interpolation
	    1D lookup table with regularly-spaced entries and cubic
	    interpolation
	  (Florian Kainz)
	* Added new ctlversion statement (Florian Kainz)

Version 1.2.1:
	Installation Tuning
        * corrected version number on dso's  - now 1.0
	* Separated package's LDFLAGS and LIBS flags so that test programs
	can link with static libraries properly
	* eliminated some warning messages during install
	(Andrew Kunz)

Version 1.2.0:
	* Reorganized libraries for general release
	* Bug fix: parsing of expressions with commas is stricter
	  (Andrew Kunz)
	* New build scripts for Linux/Unix
	  (Andrew Kunz)
	* New Windows project files and build scripts
	  (Kimball Thurston)

Version 1.1.0:
	* Bug fix: Scattered-data interpolation did not interpolate
	  smoothly between the given data points.
	* Bug fix: file IlmCtlSimd/CtlSimdReg.cpp did not compile on Windows.

Version 1.0.2:
	* Bug fix: FunctionArg::setDefaultValue() had unexpected side-effects.
	* Bug fix: log_h(+infinity) returned NaN instead of +infinity
	* Some operations on varying operands are faster.
	* Added new built-in functions:
	    float log10_h (half x)	a faster version of log10(x)
	    float pow10 (float x)	returns pow(10,x)
	    half pow10_h (float x)	a faster version of pow10(x)
	  The sample transforms in directory exrdisplay_ctl now
	  call log10_h() and pow10_h().

	* Added missing IlmCtlMathTest directory.

Version 1.0.1:
	* Fixed code that compiled with gcc 3.x but not with gcc 4.x.
	* Bug fix: the size operator for a variable-size arrays
	  sometimes incorrectly returned zero.

Version 1.0.0:
	* Initial release (only to AMPAS File Format Committee)


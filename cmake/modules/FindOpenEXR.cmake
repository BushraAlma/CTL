# Module to find OpenEXR or to build it if unavailable

find_package(OpenEXR QUIET CONFIG)
if (TARGET OpenEXR::OpenEXR)
	return()
endif()

# If we got to here, then we need to build OpenEXR
find_package(ZLIB QUIET REQUIRED)
include(GNUInstallDirs)
include(ExternalProject)
add_library(OpenEXR::OpenEXR STATIC IMPORTED GLOBAL)
add_library(OpenEXR::Iex STATIC IMPORTED GLOBAL)
add_library(OpenEXR::IlmThread STATIC IMPORTED GLOBAL)
set(OPENEXR_MAJOR_VERSION "2")
set(OPENEXR_MINOR_VERSION "5")
set(OPENEXR_PATCH_VERSION "5")
set(OPENEXR_VERSION "${OPENEXR_MAJOR_VERSION}.${OPENEXR_MINOR_VERSION}.${OPENEXR_PATCH_VERSION}")

set(EXT_DIST_ROOT "${CMAKE_BINARY_DIR}/ext/dist")
set(EXT_BUILD_ROOT "${CMAKE_BINARY_DIR}/ext/build")

set(OPENEXR_INCLUDE_DIR "${EXT_DIST_ROOT}/include/OpenEXR")
set(OPENEXR_LIB_PREFIX "${EXT_DIST_ROOT}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}")
set(OPENEXR_LIB_SUFFIX "-${OPENEXR_MAJOR_VERSION}_${OPENEXR_MINOR_VERSION}${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(OPENEXR_LIB_SUFFIX_DEBUG "-${OPENEXR_MAJOR_VERSION}_${OPENEXR_MINOR_VERSION}_d${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(OPENEXR_LIBRARY "${OPENEXR_LIB_PREFIX}IlmImf${OPENEXR_LIB_SUFFIX}")
set(OPENEXR_LIBRARY_DEBUG "${OPENEXR_LIB_PREFIX}IlmImf${OPENEXR_LIB_SUFFIX_DEBUG}")
set(IEX_LIBRARY "${OPENEXR_LIB_PREFIX}Iex${OPENEXR_LIB_SUFFIX}")
set(IEX_LIBRARY_DEBUG "${OPENEXR_LIB_PREFIX}Iex${OPENEXR_LIB_SUFFIX_DEBUG}")
set(ILMTHREAD_LIBRARY "${OPENEXR_LIB_PREFIX}IlmThread${OPENEXR_LIB_SUFFIX}")
set(ILMTHREAD_LIBRARY_DEBUG "${OPENEXR_LIB_PREFIX}IlmThread${OPENEXR_LIB_SUFFIX_DEBUG}")

set(OPENEXR_CMAKE_ARGS
	-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
	#-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
	-DCMAKE_INSTALL_PREFIX=${EXT_DIST_ROOT}
	-DBUILD_SHARED_LIBS=OFF
	-DBUILD_TESTING=OFF
	-DPYILMBASE_ENABLE=OFF
)
file(MAKE_DIRECTORY ${OPENEXR_INCLUDE_DIR})

ExternalProject_Add(OPENEXR_BUILD
	GIT_REPOSITORY "https://github.com/AcademySoftwareFoundation/openexr.git"
	GIT_TAG "v${OPENEXR_VERSION}"
	GIT_SHALLOW TRUE
	PREFIX "${EXT_BUILD_ROOT}/openexr"
	CMAKE_ARGS ${OPENEXR_CMAKE_ARGS}
	UPDATE_COMMAND "" # Skip re-checking the tag every build
	BUILD_COMMAND
		${CMAKE_COMMAND} --build .
						 --config $<CONFIG>
						 --target IlmImf
	COMMAND
		${CMAKE_COMMAND} --build .
						 --config $<CONFIG>
						 --target Iex
	COMMAND
		${CMAKE_COMMAND} --build .
						 --config $<CONFIG>
						 --target IlmThread
	INSTALL_COMMAND
		${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG> -P "OpenEXR/IlmImf/cmake_install.cmake"
	COMMAND
		${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG> -P "OpenEXR/config/cmake_install.cmake"
	COMMAND
		${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG> -P "IlmBase/Iex/cmake_install.cmake"
	COMMAND
		${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG> -P "IlmBase/IlmThread/cmake_install.cmake"
	COMMAND
		${CMAKE_COMMAND} -DBUILD_TYPE=$<CONFIG> -P "IlmBase/config/cmake_install.cmake"
	EXCLUDE_FROM_ALL TRUE
)
add_dependencies(OPENEXR_BUILD ZLIB::ZLIB)

add_dependencies(OpenEXR::OpenEXR OPENEXR_BUILD)
set_target_properties(OpenEXR::OpenEXR
	PROPERTIES
		IMPORTED_LOCATION ${OPENEXR_LIBRARY}
		IMPORTED_LOCATION_DEBUG ${OPENEXR_LIBRARY_DEBUG}
		INTERFACE_INCLUDE_DIRECTORIES ${OPENEXR_INCLUDE_DIR}
)
target_link_libraries(OpenEXR::OpenEXR
	INTERFACE
	ZLIB::ZLIB
)
add_dependencies(OpenEXR::Iex OPENEXR_BUILD)
set_target_properties(OpenEXR::Iex
	PROPERTIES
		IMPORTED_LOCATION ${IEX_LIBRARY}
		IMPORTED_LOCATION_DEBUG ${IEX_LIBRARY_DEBUG}
		INTERFACE_INCLUDE_DIRECTORIES ${OPENEXR_INCLUDE_DIR}
)
add_dependencies(OpenEXR::IlmThread OPENEXR_BUILD)
set_target_properties(OpenEXR::IlmThread
	PROPERTIES
		IMPORTED_LOCATION ${ILMTHREAD_LIBRARY}
		IMPORTED_LOCATION_DEBUG ${ILMTHREAD_LIBRARY_DEBUG}
		INTERFACE_INCLUDE_DIRECTORIES ${OPENEXR_INCLUDE_DIR}
)
